name: Windows Limitless Integration Tests
run-name: aws-pgsql-odbc Windows Limitless Integration Tests - ${{ github.event.head_commit.message }}

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '**'
    paths-ignore:
      - '**/*.md'
      - '**/*.jpg'
      - '**/*.png'
      - '**/README.*'
      - '**/LICENSE.*'
      - 'docs/**'
      - 'ISSUE_TEMPLATE/**'
      - '**/remove-old-artifacts.yml'
      - '**/release.yml'

env:
  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

  # Workflow versions. Increment these when you make changes to a build step in the workflow and
  # you want the step to run, but the corresponding cache is causing the step to be skipped.
  WORKFLOW_VERSION_POSTGRESQL: '1' # for build steps related to the 'cachePostgres' cache

  # Test configuration
  TEST_DATABASE: 'postgres_limitless'
  ENGINE: 'aurora-postgresql'
  ENGINE_VERSION: '16.4-limitless'
  TEST_DSN_ANSI: 'AWSpsqlODBC_ansi'
  TEST_DSN_UNICODE: 'AWSpsqlODBC_unicode'
  DRIVER_NAME_ANSI: 'AWS ANSI ODBC Driver for PostgreSQL (x64)'
  DRIVER_NAME_UNICODE: 'AWS Unicode ODBC Driver for PostgreSQL (x64)'

concurrency:
  group: windows-limitless-integration-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  windows-limitless-integration-tests:
    name: Windows Limitless Integration Tests
    runs-on: windows-latest
    steps:
      - name: Setup Cluster ID and Shard ID Env Variables
        run: |
          echo "LIMITLESS_CLUSTER_ID=AWS-PGODBC-Win-Integ-Limitless-${{github.run_id}}" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "LIMITLESS_SHARD_ID=AWS-PGODBC-Win-Integ-Shard-${{github.run_id}}" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Cache Postgres build output
        uses: actions/cache@v4
        id: cachePostgres
        with:
          path: |
            D:\postgresql
          key: postgresql-${{vars.POSTGRESQL_SOURCE_TAG}}_openssl-${{vars.OPENSSL_VERSION}}_pkgconfiglite-${{vars.PKGCONFIGLITE_VERSION}}_winflexbison-${{vars.WINFLEXBISON_VERSION}}_workflow-${{env.WORKFLOW_VERSION_POSTGRESQL}}

      - name: Cache Postgres source
        if: ${{steps.cachePostgres.outputs.cache-hit != 'true'}}
        uses: actions/cache@v4
        id: cachePostgresSource
        with:
          path: postgres
          key: postgres-source-${{vars.POSTGRESQL_SOURCE_TAG}}

      - name: Get Postgres source
        uses: actions/checkout@v4
        if: ${{steps.cachePostgresSource.outputs.cache-hit != 'true' && steps.cachePostgres.outputs.cache-hit != 'true'}}
        with:
          repository: "postgres/postgres.git"
          ref: ${{vars.POSTGRESQL_SOURCE_TAG}}
          path: postgres

      - name: Get meson & ninja
        if: ${{steps.cachePostgres.outputs.cache-hit != 'true'}}
        run: |
          python -m pip install meson
          python -m pip install ninja

      - name: Cache GNU diffutils for Test on PostgreSQL for Windows
        uses: actions/cache@v4
        id: cacheDiffutilsZip
        with:
          path: C:\OTHERBIN\diffutils
          key: diff_utils-${{vars.DIFFUTILS_VERSION}}
        env:
          SEGMENT_DOWNLOAD_TIMEOUT_MINS: 1

      - name: Cache PostgreSQL installer
        uses: actions/cache@v4
        id: cachePostgresInstaller
        with:
          path: C:\OTHERBIN\postgresql_install.exe
          key: postgresql_installer-${{vars.POSTGRESQL_PACKAGE_FILEID}}

      - name: Cache pkgconfiglite for Compile using msvc and meson
        if: ${{steps.cachePostgres.outputs.cache-hit != 'true'}}
        uses: actions/cache@v4
        id: cachePkgConfigLiteZip
        with:
          path: C:\OTHERBIN\pkgconfiglite
          key: pkg-config-lite-${{vars.PKGCONFIGLITE_VERSION}}-win32
        env:
          SEGMENT_DOWNLOAD_TIMEOUT_MINS: 1

      - name: Cache Win64OpenSSL64 for Win64Compile
        if: ${{steps.cachePostgres.outputs.cache-hit != 'true'}}
        uses: actions/cache@v4
        id: cacheWin64OpenSSL
        with:
          path: C:\OTHERBIN\openssl64
          key: Win64OpenSSL-${{vars.OPENSSL_VERSION}}

      - name: Cache winflexbison for Compile using msvc
        if: ${{steps.cachePostgres.outputs.cache-hit != 'true'}}
        uses: actions/cache@v4
        id: cacheWinFlexBisonZip
        with:
          path: C:\OTHERBIN\winflexbison
          key: winflexbison-${{vars.WINFLEXBISON_VERSION}}
        env:
          SEGMENT_DOWNLOAD_TIMEOUT_MINS: 1    

      - name: Download GNU diffutils for Test on PostgreSQL for Windows 
        if: ${{steps.cacheDiffutilsZip.outputs.cache-hit != 'true'}}
        uses: suisei-cn/actions-download-file@v1.6.0
        id: downloadDiffutilsZip
        with:
          retry-times: 5
          url: https://zenlayer.dl.sourceforge.net/project/gnuwin32/diffutils/${{vars.DIFFUTILS_VERSION}}/diffutils-${{vars.DIFFUTILS_VERSION}}-bin.zip
          filename: diffutils-bin.zip
      
      - name: Download openssl64 for win64 compile
        if: ${{steps.cacheWin64OpenSSL.outputs.cache-hit != 'true' && steps.cachePostgres.outputs.cache-hit != 'true'}}
        uses: suisei-cn/actions-download-file@v1.6.0
        id: downloadWin64OpenSSL
        with:
          retry-times: 5
          url: https://slproweb.com/download/Win64OpenSSL-${{vars.OPENSSL_VERSION}}.exe
          filename: Win64OpenSSL.exe
    
      - name: Download pkgconfiglite for Compile using msvc and meson
        if: ${{steps.cachePkgConfigLiteZip.outputs.cache-hit != 'true' && steps.cachePostgres.outputs.cache-hit != 'true'}}
        uses: suisei-cn/actions-download-file@v1.6.0
        id: downloadPkgConfigLiteZip
        with:
          retry-times: 5
          url: http://downloads.sourceforge.net/project/pkgconfiglite/${{vars.PKGCONFIGLITE_VERSION}}/pkg-config-lite-${{vars.PKGCONFIGLITE_VERSION}}_bin-win32.zip
          filename: pkg-config-lite_bin-win32.zip

      - name: Download winflexbison for Compile using msvc
        if: ${{steps.cacheWinFlexBisonZip.outputs.cache-hit != 'true' && steps.cachePostgres.outputs.cache-hit != 'true'}}
        uses: suisei-cn/actions-download-file@v1.6.0
        id: downloadWinFlexBisonZip
        with:
          retry-times: 5
          url: https://sourceforge.net/projects/winflexbison/files/win_flex_bison-${{vars.WINFLEXBISON_VERSION}}.zip
          filename: win_flex_bison.zip

      - name: Download postgresql install from EDB
        uses: suisei-cn/actions-download-file@v1.6.0
        if: ${{steps.cachePostgresInstaller.outputs.cache-hit != 'true'}}
        id: downloadPostgresInstaller
        with:
          retry-times: 5
          url: https://sbp.enterprisedb.com/getfile.jsp?fileid=${{vars.POSTGRESQL_PACKAGE_FILEID}}
          target: c:\OTHERBIN
          filename: postgresql_install.exe

      - name: Extract Diffutils for Test on PostgreSQL for Windows
        if: ${{steps.cacheDiffutilsZip.outputs.cache-hit != 'true'}}
        shell: cmd
        run: |
          rem MKDIR creates any intermediate directories in the path, if needed.
          mkdir "C:\OTHERBIN\diffutils"
          rem 7z is provided by Github Actions
          7z x diffutils-bin.zip -o"C:\OTHERBIN\diffutils"

      - name: Add Diffutils bin directory to the PATH for Test on PostgreSQL for Windows
        shell: cmd
        run: |
          rem - man7.org/linux/man-pages/man1/printf.1.html
          printf "C:\\OTHERBIN\\diffutils\\bin" >> %GITHUB_PATH%

      - name: Extract pkgconfiglite for Compile using msvc and meson
        if: ${{steps.cachePkgConfigLiteZip.outputs.cache-hit != 'true' && steps.cachePostgres.outputs.cache-hit != 'true'}}
        shell: cmd
        run: |
          rem MKDIR creates any intermediate directories in the path, if needed.
          mkdir "C:\OTHERBIN\pkgconfiglite"
          rem 7z is provided by Github Actions
          7z x pkg-config-lite_bin-win32.zip -o"C:\OTHERBIN\pkgconfiglite"

      - name: Add pkgconfiglite bin directory to the PATH for Compile using msvc and meson
        if: ${{steps.cachePostgres.outputs.cache-hit != 'true'}}
        shell: cmd
        run: |
          rem - man7.org/linux/man-pages/man1/printf.1.html
          printf "C:\\OTHERBIN\\pkgconfiglite\\pkg-config-lite-%PKGCONFIGLITE_VERSION%\\bin" >> %GITHUB_PATH%

      - name: Install Win64OpenSSL
        if: ${{steps.cacheWin64OpenSSL.outputs.cache-hit != 'true' && steps.cachePostgres.outputs.cache-hit != 'true'}}
        shell: cmd
        run: Win64OpenSSL.exe /sp /silent /dir=c:\OTHERBIN\openssl64

        # Choco Install winflexbison
        # BUT the "crazy-max/ghaction-chocolatey@v2" "install pkgconfiglite" file download often times-out
      - name: Extract winflexbison for Compile using msvc
        if: ${{steps.cacheWinFlexBisonZip.outputs.cache-hit != 'true' && steps.cachePostgres.outputs.cache-hit != 'true'}}
        shell: cmd
        run: |
          rem MKDIR creates any intermediate directories in the path, if needed.
          mkdir "C:\OTHERBIN\winflexbison"
          rem 7z is provided by Github Actions
          7z x win_flex_bison.zip -o"C:\OTHERBIN\winflexbison"

      - name: Add the winflexbison directory to the PATH for Compile using msvc
        if: ${{steps.cachePostgres.outputs.cache-hit != 'true'}}
        shell: cmd
        run: |
          rem - man7.org/linux/man-pages/man1/printf.1.html
          printf "C:\OTHERBIN\\winflexbison" >> %GITHUB_PATH%

      - name: Setup msvc x64
        if: ${{steps.cachePostgres.outputs.cache-hit != 'true'}}
        uses: TheMrMilchmann/setup-msvc-dev@v3
        with: 
          arch: x64

      - name : 'build postgres x64'
        if: ${{steps.cachePostgres.outputs.cache-hit != 'true'}}
        working-directory: postgres
        run: |
          meson setup build -Dssl=openssl -Dextra_lib_dirs=c:\OTHERBIN\openssl64\lib\VC\x64\MT -Dextra_include_dirs=c:\OTHERBIN\openssl64\include --prefix=d:\postgresql
          cd build
          ninja
          ninja install
          cp c:\OTHERBIN\openssl64\*.dll d:\postgresql\bin

      - name: Setup msvc for psqlodbc
        uses: TheMrMilchmann/setup-msvc-dev@v3
        with: 
          arch: x86

      - name: Checkout aws-pgsql-odbc
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Checkout aws-rds-odbc
        uses: actions/checkout@v4
        with:
          repository: aws/aws-rds-odbc
          ref: main
          path: ./libs/aws-rds-odbc
          token: ${{secrets.CLONE_PAT}}

      - name: Initialize submodules
        run: |
          git submodule update --init --recursive

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2

      - name: Setup nmake
        uses: ilammy/msvc-dev-cmd@v1.13.0

      - name: Install WiX
        shell: cmd
        run: |
          dotnet tool install --global wix --version ${{vars.WIX_VERSION}}
          wix extension add --global WixToolset.UI.wixext/${{vars.WIX_VERSION}}
  
      - name: Cache AWS SDK libraries
        id: cache-dynamic-aws-sdk
        uses: actions/cache@v4
        with:
          path: |
            libs/aws-rds-odbc/aws_sdk
          key: ${{ runner.os }}-aws-sdk-dynamic-lib

      - name: Build the driver and the installer
        run: |
          copy .github\workflows\configuration.xml winbuild
          .\windows\buildall.ps1 ${{env.BUILD_CONFIGURATION}}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Set up Temp AWS Credentials
        shell: pwsh
        run: |
          $creds = (aws sts get-session-token --duration-seconds 21600 --query 'Credentials.[AccessKeyId, SecretAccessKey, SessionToken]' --output text)
          $credsArray = ($creds -split '\s+')
          $credsArray | Measure-Object -Character
          $access_key = $credsArray[0]
          $secret_key = $credsArray[1]
          $session_key = $credsArray[2]
          echo "::add-mask::$access_key"
          echo "::add-mask::$secret_key"
          echo "::add-mask::$session_key"
          echo "AWS_ACCESS_KEY_ID=$access_key" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "AWS_SECRET_ACCESS_KEY=$secret_key" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "AWS_SESSION_TOKEN=$session_key" | Out-File -FilePath $env:GITHUB_ENV -Append
      
      - name: Create Limitless RDS Cluster
        id: limitlessClusterSetup
        shell: pwsh
        working-directory: scripts
        run: |
          . ".\aws_rds_helper.ps1"
          Create-Limitless-RDS-Cluster `
          -TestUsername ${{ secrets.TEST_USERNAME }} `
          -TestPassword ${{ secrets.TEST_PASSWORD }} `
          -TestDatabase ${{ env.TEST_DATABASE }} `
          -ClusterId ${{ env.LIMITLESS_CLUSTER_ID }} `
          -ShardId ${{ env.LIMITLESS_SHARD_ID }} `
          -Engine ${{ env.ENGINE }} `
          -EngineVersion ${{ env.ENGINE_VERSION }} `
          -AwsRdsMonitoringRoleArn ${{ secrets.AWS_RDS_MONITORING_ROLE_ARN }} `
          -Region ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Get Limitless Cluster endpoint
        shell: pwsh
        working-directory: scripts
        run: |
          . ".\aws_rds_helper.ps1"
          $endpoint = (Get-Cluster-Endpoint -ClusterId ${{ env.LIMITLESS_CLUSTER_ID }})
          echo "::add-mask::$endpoint"
          echo "LIMITLESS_CLUSTER_ENDPOINT=$endpoint" | Out-File -FilePath $env:GITHUB_ENV -Append
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ env.AWS_SESSION_TOKEN }}

      - name: Install driver
        shell: pwsh
        working-directory: installer\x64
        run:  Start-Process msiexec "/lp! .\test.log /i awspsqlodbc_x64.msi /quiet /norestart"  -Wait;

      - name: Create Limitless Cluster Secrets
        shell: pwsh
        working-directory: scripts
        run: |
            . ".\aws_rds_helper.ps1"
            $secrets = (Create-Db-Secrets `
                -Username ${{ secrets.TEST_USERNAME }} `
                -Password ${{ secrets.TEST_PASSWORD }} `
                -Engine "postgres" `
                -ClusterEndpoint ${{ env.LIMITLESS_CLUSTER_ENDPOINT }})
            echo "::add-mask::$secrets"
            echo "LIMITLESS_CLUSTER_SECRETS_ARN=$secrets" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Install driver
        shell: pwsh
        working-directory: installer\x64
        run:  Start-Process msiexec "/lp! .\test.log /i awspsqlodbc_x64.msi /quiet /norestart"  -Wait;

      - name: Install Ansi DSNs
        shell: pwsh
        run:  |
            Add-OdbcDsn -Name ${{ env.TEST_DSN_ANSI }} `
            -DriverName "${{ env.DRIVER_NAME_ANSI }}" `
            -DsnType User `
            -SetPropertyValue `
             @("Auth Type=database", `
             "Server=${{ env.LIMITLESS_CLUSTER_ENDPOINT }}", `
             "Port=5432", `
             "SSL Mode=prefer", `
             "User Name=${{ secrets.TEST_USERNAME }}", `
             "Password=${{ secrets.TEST_PASSWORD }}")

      - name: Install Unicode DSNs
        shell: pwsh
        run:  |
            Add-OdbcDsn -Name ${{ env.TEST_DSN_UNICODE }} `
            -DriverName "${{ env.DRIVER_NAME_UNICODE }}" `
            -DsnType User `
            -SetPropertyValue `
             @("Auth Type=database", `
             "Server=${{ env.LIMITLESS_CLUSTER_ENDPOINT }}", `
             "Port=5432", `
             "SSL Mode=prefer", `
             "User Name=${{ secrets.TEST_USERNAME }}", `
             "Password=${{ secrets.TEST_PASSWORD }}")

      - name: Build and Run Ansi Integration Tests
        shell: pwsh
        if: ${{steps.limitlessClusterSetup.outcome == 'success'}}
        run: |
          cmake -S test_integration -B build_ansi -DTEST_LIMITLESS=TRUE
          cmake --build build_ansi --config ${{env.BUILD_CONFIGURATION}}
          .\build_ansi\bin\${{env.BUILD_CONFIGURATION}}\integration.exe
        env:
          TEST_DSN: ${{ env.TEST_DSN_ANSI }}
          TEST_USERNAME: ${{ secrets.TEST_USERNAME }}
          TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ env.AWS_SESSION_TOKEN }}
          AWS_RDS_MONITORING_ROLE_ARN: ${{ secrets.AWS_RDS_MONITORING_ROLE_ARN }}
          RDS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          TEST_IAM_USER: ${{ secrets.TEST_IAM_USER }}
          DRIVER_PATH: ${{ github.workspace }}
          SECRETS_ARN: ${{ env.LIMITLESS_CLUSTER_SECRETS_ARN }}
          TEST_SERVER: ${{ env.LIMITLESS_CLUSTER_ENDPOINT }}

      - name: Build and Run Unicode Integration Tests
        if: ${{steps.limitlessClusterSetup.outcome == 'success'}}
        shell: pwsh
        run: |
            cmake -S test_integration -B build_unicode -DUNICODE_BUILD=TRUE -DTEST_LIMITLESS=TRUE
            cmake --build build_unicode --config ${{env.BUILD_CONFIGURATION}}
            .\build_unicode\bin\${{env.BUILD_CONFIGURATION}}\integration.exe
        env:
            TEST_DSN: ${{ env.TEST_DSN_UNICODE }}
            TEST_USERNAME: ${{ secrets.TEST_USERNAME }}
            TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
            AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
            AWS_SESSION_TOKEN: ${{ env.AWS_SESSION_TOKEN }}
            AWS_RDS_MONITORING_ROLE_ARN: ${{ secrets.AWS_RDS_MONITORING_ROLE_ARN }}
            RDS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
            TEST_IAM_USER: ${{ secrets.TEST_IAM_USER }}
            DRIVER_PATH: ${{ github.workspace }}
            SECRETS_ARN: ${{ env.LIMITLESS_CLUSTER_SECRETS_ARN }}
            TEST_SERVER: ${{ env.LIMITLESS_CLUSTER_ENDPOINT }}

      - name: Delete Limitless RDS Cluster
        if: always()
        shell: pwsh
        working-directory: scripts
        run: |
          . ".\aws_rds_helper.ps1"
          Delete-Limitless-Db-Cluster -ClusterId ${{ env.LIMITLESS_CLUSTER_ID }} -ShardId ${{ env.LIMITLESS_SHARD_ID }} -Region ${{ secrets.AWS_DEFAULT_REGION }}
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ env.AWS_SESSION_TOKEN }}

      - name: Delete Limitless Db Secrets
        if: always()
        shell: pwsh
        working-directory: scripts
        run: |
          . ".\aws_rds_helper.ps1"
          Delete-Secrets ${{ env.LIMITLESS_CLUSTER_SECRETS_ARN }}
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ env.AWS_SESSION_TOKEN }}
    
       # Make sure IP is always deleted
      - name: Get Github Action IP
        if: always()
        id: ip
        uses: haythem/public-ip@v1.3

      - name: Remove Github Action IP
        if: always()
        run: |
          aws ec2 revoke-security-group-ingress `
            --group-name default `
            --protocol tcp `
            --port 5432 `
            --cidr ${{ steps.ip.outputs.ipv4 }}/32 `
           *> $null;

      - name: Archive log results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: 'integration-test-logs'
          path: logs
          retention-days: 3
