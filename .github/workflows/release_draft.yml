name: 'Release Draft'

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'

permissions:
  actions: write
  contents: write
  deployments: write
  packages: write
  pull-requests: write
  repository-projects: write

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

  # Workflow versions. Increment these when you make changes to a build step in the workflow and
  # you want the step to run, but the corresponding cache is causing the step to be skipped.
  WORKFLOW_VERSION_POSTGRESQL: '1' # for build steps related to the 'cachePostgres' cache

  # Software versions. 
  POSTGRESQL_SOURCE_TAG: 'REL_17_STABLE'
  POSTGRESQL_PACKAGE_FILEID: '1259019'
  OPENSSL_VERSION: '3_3_2'
  PKGCONFIGLITE_VERSION: '0.28-1'
  WINFLEXBISON_VERSION: '2.5.24'
  IODBC_VERSION: '3.52.16'

jobs:
  # Linux Build
  build-linux:
    if: false # Skip job, not for release
    runs-on: ubuntu-latest
    outputs:
      linux_x64_ansi: ${{ steps.linux-x64-ansi.outputs.hash }}
      linux_x64_unicode: ${{ steps.linux-x64-unicode.outputs.hash }}
    env:
      CMAKE_GENERATOR: Unix Makefiles
    steps:
      - name: Checkout aws-pgsql-odbc
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Checkout aws-rds-odbc
        uses: actions/checkout@v4
        with:
          repository: aws/aws-rds-odbc
          ref: main
          path: ./libs/aws-rds-odbc
          token: ${{secrets.CLONE_PAT}}

      - name: Initialize submodules
        run: |
          git submodule update --init --recursive

      - name: Download Prerequsites
        run: |
          sudo apt-get update
          sudo apt-get install autoconf automake build-essential cmake curl g++-10 git grep libcurl4-openssl-dev libssl-dev libgflags-dev libodbc2 libodbcinst2 libpq-dev libtool-bin lsb-base lsb-release uuid-dev zlib1g-dev

      - name: Download & Setup iODBC
        run: |
          curl -L https://github.com/openlink/iODBC/releases/download/v${{env.IODBC_VERSION}}/libiodbc-${{env.IODBC_VERSION}}.tar.gz -o libiodbc.tar
          tar xf libiodbc.tar
          cd libiodbc-${{env.IODBC_VERSION}}
          ./configure && make
          sudo make install

      - name: Build Driver
        run: |
          sudo bash linux/buildall ${{env.BUILD_CONFIGURATION}} true false

      - name: Get Ansi Driver Hash
        id: linux-x64-ansi
        run: |
          hash=$(sha256sum ./.libs/awspsqlodbca.so | cut -d' ' -f1)
          echo "hash=${hash}" >> "$GITHUB_OUTPUT"

      - name: Get Unicode Driver Hash
        id: linux-x64-unicode
        run: |
          hash=$(sha256sum ./.libs/awspsqlodbcw.so | cut -d' ' -f1)
          echo "hash=${hash}" >> "$GITHUB_OUTPUT"

      - name: Package Drivers as Tar
        run:
          tar -czvhf "aws-pgsql-odbc-${{ github.ref_name }}-linux-x64.tar.gz" ./.libs/awspsqlodbca.so ./.libs/awspsqlodbcw.so

      - name: Upload the ANSI & Unicode driver
        uses: actions/upload-artifact@v4
        with:
          name: installers-linux
          path: |
            aws-pgsql-odbc-${{ github.ref_name }}-linux-x64.tar.gz
          retention-days: 5
          if-no-files-found: error

  # Mac Build
  build-macos:
    runs-on: macos-15
    outputs:
      macos_arm64_ansi: ${{ steps.macos-arm64-ansi.outputs.hash }}
      macos_arm64_unicode: ${{ steps.macos-arm64-unicode.outputs.hash }}
    steps:
      - name: Update Homebrew
        run: brew update && brew upgrade && brew cleanup

      - name: Install and configure prerequisites
        run: |
          brew install autoconf automake gflags grep libtool unixodbc zlib
          ln -s /opt/homebrew/opt/libpq/bin/psql /opt/homebrew/bin/psql

      - name: Install PostgreSQL
        run: |
          brew install postgresql@17
          echo "/opt/homebrew/opt/postgresql@17/bin" >> $GITHUB_PATH

      - name: Checkout aws-pgsql-odbc
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Checkout aws-rds-odbc
        uses: actions/checkout@v4
        with:
          repository: aws/aws-rds-odbc
          ref: main
          path: ./libs/aws-rds-odbc
          token: ${{secrets.CLONE_PAT}}

      - name: Initialize submodules
        run: git submodule update --init --recursive

      - name: Cache AWS SDK libraries
        id: cache-dynamic-aws-sdk
        uses: actions/cache@v4
        with:
          path: |
            libs/aws-rds-odbc/aws_sdk
          key: ${{ runner.os }}-aws-sdk-dynamic-lib

      - name: Build the driver
        run: ./macos/buildall ${{env.BUILD_CONFIGURATION}}

      - name: Get Ansi Driver Hash
        id: macos-arm64-ansi
        run: |
          hash=$(shasum -a 256 ./.libs/awspsqlodbca.so | cut -d' ' -f1)
          echo "hash=${hash}" >> "$GITHUB_OUTPUT"

      - name: Get Unicode Driver Hash
        id: macos-arm64-unicode
        run: |
          hash=$(shasum -a 256 ./.libs/awspsqlodbcw.so | cut -d' ' -f1)
          echo "hash=${hash}" >> "$GITHUB_OUTPUT"

      - name: Package Drivers as Zip
        run:
          zip -r "aws-pgsql-odbc-${{ github.ref_name }}-macos-arm64.zip" ./.libs/awspsqlodbca.so ./.libs/awspsqlodbcw.so

      - name: Upload the ANSI & Unicode driver
        uses: actions/upload-artifact@v4
        with:
          name: installers-macos
          path: |
            aws-pgsql-odbc-${{ github.ref_name }}-macos-arm64.zip
          retention-days: 5
          if-no-files-found: error

  # Windows Build
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Cache Postgres build output
        uses: actions/cache@v4
        id: cachePostgres
        with:
          path: |
            d:\postgresql
            d:\postgresql86
          key: postgresql-${{env.POSTGRESQL_SOURCE_TAG}}_openssl-${{env.OPENSSL_VERSION}}_pkgconfiglite-${{env.PKGCONFIGLITE_VERSION}}_winflexbison-${{env.WINFLEXBISON_VERSION}}_workflow-${{env.WORKFLOW_VERSION_POSTGRESQL}}

      - name: Cache PostgreSQL installer
        uses: actions/cache@v4
        id: cachePostgresInstaller
        with:
          path: C:\OTHERBIN\postgresql_install.exe
          key: postgresql_installer-${{env.POSTGRESQL_PACKAGE_FILEID}}

      - name: 'setup msvc for psqlodbc'
        uses: TheMrMilchmann/setup-msvc-dev@v3
        with: 
          arch: x86

      - name: Checkout aws-pgsql-odbc
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Checkout aws-rds-odbc
        uses: actions/checkout@v4
        with:
          repository: aws/aws-rds-odbc
          ref: main
          path: ./libs/aws-rds-odbc
          token: ${{secrets.CLONE_PAT}}

      - name: Initialize submodules
        run: |
          git submodule update --init --recursive

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2

      - name: Setup nmake
        uses: ilammy/msvc-dev-cmd@v1.13.0

      - name: Install WiX
        shell: cmd
        run: |
          dotnet tool install --global wix
          wix extension add --global WixToolset.UI.wixext/6.0.0

      - name: Cache AWS SDK libraries
        id: cache-dynamic-aws-sdk
        uses: actions/cache@v4
        with:
          path: |
            libs/aws-rds-odbc/aws_sdk
          key: ${{ runner.os }}-aws-sdk-dynamic-lib

      - name: Build the driver and the installer
        run: |
          copy .github\workflows\configuration.xml winbuild
          .\windows\buildall.ps1 ${{env.BUILD_CONFIGURATION}}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-skip-session-tagging: true
          aws-access-key-id: ${{ secrets.AWS_BUILD_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_BUILD_SECRET_KEY }}
          aws-session-token: ${{ secrets.AWS_BUILD_SESSION_TOKEN }}
          aws-region: us-west-2
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-external-id: ${{ secrets.AWS_ROLE_EXTERNAL_ID }}
          role-duration-seconds: 3600

      - name: Run signer script
        shell: pwsh
        working-directory: ./scripts
        run: |
          choco upgrade jq -y
          . ".\sign_installer.ps1"
          Invoke-SignInstaller ${{ github.workspace }}\installer/x64/ winx64a ${{ github.ref_name }} ${{ secrets.AWS_UNSIGNED_BUCKET }} ${{ secrets.AWS_SIGNED_BUCKET }} ${{ secrets.AWS_S3_KEY }}aws-pgsql-odbc-${{ github.ref_name }}-winx64a.msi

      - name: Upload installer
        uses: actions/upload-artifact@v4
        with:
          name: installers-windows
          path: ./installer/x64/*winx64a.msi
          retention-days: 5
          if-no-files-found: error

  # Create Release
  draft-release:
    name: Create Draft Release
    runs-on: ubuntu-latest
    needs: [
      # build-linux,
      build-macos,
      build-windows
    ]
    env:
      # linux_x64_ansi_hash: ${{needs.build-linux.outputs.linux_x64_ansi}}
      # linux_x64_unicode_hash: ${{needs.build-linux.outputs.linux_x64_unicode}}
      macos_arm64_ansi_hash: ${{needs.build-macos.outputs.macos_arm64_ansi}}
      macos_arm64_unicode_hash: ${{needs.build-macos.outputs.macos_arm64_unicode}}
    steps:
      - name: Checkout aws-pgsql-odbc
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Download all installers
        uses: actions/download-artifact@v4.1.7
        with:
          path: installers
          pattern: installers-*
          merge-multiple: true

      - name: Extract release notes
        uses: ffurrer2/extract-release-notes@v2
        with:
          release_notes_file: RELEASE_DETAILS.md

      - name: Append Checksums
        run: |
          cat << EOF >> RELEASE_DETAILS.md

          ### SHA256 Checksums

          - macos-arm64-ansi: \`$macos_arm64_ansi_hash\`
          - macos-arm64-unicode: \`$macos_arm64_unicode_hash\`

          EOF

      - name: Upload to Draft Release
        uses: ncipollo/release-action@v1
        with:
          draft: true
          name: "AWS ODBC Driver for PostgreSQL - v${{ github.ref_name }}"
          bodyFile: RELEASE_DETAILS.md
          artifacts: "*/*.zip, */*.msi, */*.tar.gz"
          token: ${{ secrets.GITHUB_TOKEN }}
