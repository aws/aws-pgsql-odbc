name: Release Draft
run-name: aws-pgsql-odbc Draft Release - ${{ github.ref_name }}

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'

permissions:
  actions: write
  contents: write
  deployments: write
  packages: write
  pull-requests: write
  repository-projects: write

env:
  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

  # Workflow versions. Increment these when you make changes to a build step in the workflow and
  # you want the step to run, but the corresponding cache is causing the step to be skipped.
  WORKFLOW_VERSION_POSTGRESQL: '1' # for build steps related to the 'cachePostgres' cache

jobs:
  # Linux Build
  build-linux:
    if: false # Skip job, not for release
    runs-on: ubuntu-latest
    outputs:
      linux_x64_ansi: ${{ steps.linux-x64-ansi.outputs.hash }}
      linux_x64_unicode: ${{ steps.linux-x64-unicode.outputs.hash }}
    env:
      CMAKE_GENERATOR: Unix Makefiles
    steps:
      - name: Checkout aws-pgsql-odbc
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 1

      - name: Initialize submodules
        run: |
          git submodule update --init --recursive

      - name: Download Prerequsites
        run: |
          sudo apt-get update
          sudo apt-get install autoconf automake build-essential cmake curl g++-10 git grep libcurl4-openssl-dev libssl-dev libgflags-dev libodbc2 libodbcinst2 libpq-dev libtool-bin lsb-base lsb-release uuid-dev zlib1g-dev

      - name: Download & Setup iODBC
        run: |
          curl -L https://github.com/openlink/iODBC/releases/download/v${{vars.IODBC_VERSION}}/libiodbc-${{vars.IODBC_VERSION}}.tar.gz -o libiodbc.tar
          tar xf libiodbc.tar
          cd libiodbc-${{vars.IODBC_VERSION}}
          ./configure && make
          sudo make install

      - name: Build Driver
        run: |
          sudo bash linux/buildall ${{env.BUILD_CONFIGURATION}} true false

      - name: Get Ansi Driver Hash
        id: linux-x64-ansi
        run: |
          hash=$(sha256sum ./.libs/awspsqlodbca.so | cut -d' ' -f1)
          echo "hash=${hash}" >> "$GITHUB_OUTPUT"

      - name: Get Unicode Driver Hash
        id: linux-x64-unicode
        run: |
          hash=$(sha256sum ./.libs/awspsqlodbcw.so | cut -d' ' -f1)
          echo "hash=${hash}" >> "$GITHUB_OUTPUT"

      - name: Package Drivers as Tar
        run:
          tar -czvhf "aws-pgsql-odbc-${{ github.ref_name }}-linux-x64.tar.gz" ./.libs/awspsqlodbca.so ./.libs/awspsqlodbcw.so

      - name: Upload the ANSI & Unicode driver
        uses: actions/upload-artifact@v4
        with:
          name: installers-linux
          path: |
            aws-pgsql-odbc-${{ github.ref_name }}-linux-x64.tar.gz
          retention-days: 5
          if-no-files-found: error

  # Mac Build
  build-macos:
    runs-on: macos-15
    outputs:
      macos_arm64_ansi: ${{ steps.macos-arm64-ansi.outputs.hash }}
      macos_arm64_unicode: ${{ steps.macos-arm64-unicode.outputs.hash }}
    steps:
      - name: Update Homebrew
        run: brew update && brew upgrade && brew cleanup

      - name: Install and configure prerequisites
        run: |
          brew install autoconf automake gflags grep libtool unixodbc zlib
          ln -s /opt/homebrew/opt/libpq/bin/psql /opt/homebrew/bin/psql

      - name: Install PostgreSQL
        run: |
          brew install postgresql@17
          echo "/opt/homebrew/opt/postgresql@17/bin" >> $GITHUB_PATH

      - name: Checkout aws-pgsql-odbc
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 1

      - name: Initialize submodules
        run: git submodule update --init --recursive

      - name: Cache AWS SDK libraries
        id: cache-dynamic-aws-sdk
        uses: actions/cache@v4
        with:
          path: |
            libs/aws-rds-odbc/aws_sdk
          key: ${{ runner.os }}-aws-sdk-dynamic-lib

      - name: Build the driver
        run: ./macos/buildall ${{env.BUILD_CONFIGURATION}}

      - name: Get Ansi Driver Hash
        id: macos-arm64-ansi
        run: |
          hash=$(shasum -a 256 ./.libs/awspsqlodbca.so | cut -d' ' -f1)
          echo "hash=${hash}" >> "$GITHUB_OUTPUT"

      - name: Get Unicode Driver Hash
        id: macos-arm64-unicode
        run: |
          hash=$(shasum -a 256 ./.libs/awspsqlodbcw.so | cut -d' ' -f1)
          echo "hash=${hash}" >> "$GITHUB_OUTPUT"

      - name: Package Drivers as Zip
        run:
          zip -r "aws-pgsql-odbc-${{ github.ref_name }}-macos-arm64.zip" ./.libs/awspsqlodbca.so ./.libs/awspsqlodbcw.so

      - name: Upload the ANSI & Unicode driver
        uses: actions/upload-artifact@v4
        with:
          name: installers-macos
          path: |
            aws-pgsql-odbc-${{ github.ref_name }}-macos-arm64.zip
          retention-days: 5
          if-no-files-found: error

  # Windows Build
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Cache Postgres build output
        uses: actions/cache@v4
        id: cachePostgres
        with:
          path: |
            D:\postgresql
          key: postgresql-${{vars.POSTGRESQL_SOURCE_TAG}}_openssl-${{vars.OPENSSL_VERSION}}_pkgconfiglite-${{vars.PKGCONFIGLITE_VERSION}}_winflexbison-${{vars.WINFLEXBISON_VERSION}}_workflow-${{env.WORKFLOW_VERSION_POSTGRESQL}}

      - name: Cache Postgres source
        if: ${{steps.cachePostgres.outputs.cache-hit != 'true'}}
        uses: actions/cache@v4
        id: cachePostgresSource
        with:
          path: postgres
          key: postgres-source-${{vars.POSTGRESQL_SOURCE_TAG}}

      - name: Get Postgres source
        uses: actions/checkout@v4
        if: ${{steps.cachePostgresSource.outputs.cache-hit != 'true' && steps.cachePostgres.outputs.cache-hit != 'true'}}
        with:
          repository: "postgres/postgres.git"
          ref: ${{vars.POSTGRESQL_SOURCE_TAG}}
          path: postgres

      - name: Get meson & ninja
        if: ${{steps.cachePostgres.outputs.cache-hit != 'true'}}
        run: |
          python -m pip install meson
          python -m pip install ninja

      - name: Cache GNU diffutils for Test on PostgreSQL for Windows
        uses: actions/cache@v4
        id: cacheDiffutilsZip
        with:
          path: C:\OTHERBIN\diffutils
          key: diff_utils-${{vars.DIFFUTILS_VERSION}}
        env:
          SEGMENT_DOWNLOAD_TIMEOUT_MINS: 1

      - name: Cache PostgreSQL installer
        uses: actions/cache@v4
        id: cachePostgresInstaller
        with:
          path: C:\OTHERBIN\postgresql_install.exe
          key: postgresql_installer-${{vars.POSTGRESQL_PACKAGE_FILEID}}

      - name: Cache pkgconfiglite for Compile using msvc and meson
        if: ${{steps.cachePostgres.outputs.cache-hit != 'true'}}
        uses: actions/cache@v4
        id: cachePkgConfigLiteZip
        with:
          path: C:\OTHERBIN\pkgconfiglite
          key: pkg-config-lite-${{vars.PKGCONFIGLITE_VERSION}}-win32
        env:
          SEGMENT_DOWNLOAD_TIMEOUT_MINS: 1

      - name: Cache Win64OpenSSL64 for Win64Compile
        if: ${{steps.cachePostgres.outputs.cache-hit != 'true'}}
        uses: actions/cache@v4
        id: cacheWin64OpenSSL
        with:
          path: C:\OTHERBIN\openssl64
          key: Win64OpenSSL-${{vars.OPENSSL_VERSION}}

      - name: Cache winflexbison for Compile using msvc
        if: ${{steps.cachePostgres.outputs.cache-hit != 'true'}}
        uses: actions/cache@v4
        id: cacheWinFlexBisonZip
        with:
          path: C:\OTHERBIN\winflexbison
          key: winflexbison-${{vars.WINFLEXBISON_VERSION}}
        env:
          SEGMENT_DOWNLOAD_TIMEOUT_MINS: 1

      - name: Download GNU diffutils for Test on PostgreSQL for Windows 
        if: ${{steps.cacheDiffutilsZip.outputs.cache-hit != 'true'}}
        uses: suisei-cn/actions-download-file@v1.6.0
        id: downloadDiffutilsZip
        with:
          retry-times: 5
          url: https://zenlayer.dl.sourceforge.net/project/gnuwin32/diffutils/${{vars.DIFFUTILS_VERSION}}/diffutils-${{vars.DIFFUTILS_VERSION}}-bin.zip
          filename: diffutils-bin.zip
      
      - name: Download openssl64 for win64 compile
        if: ${{steps.cacheWin64OpenSSL.outputs.cache-hit != 'true' && steps.cachePostgres.outputs.cache-hit != 'true'}}
        uses: suisei-cn/actions-download-file@v1.6.0
        id: downloadWin64OpenSSL
        with:
          retry-times: 5
          url: https://slproweb.com/download/Win64OpenSSL-${{vars.OPENSSL_VERSION}}.exe
          filename: Win64OpenSSL.exe
    
      - name: Download pkgconfiglite for Compile using msvc and meson
        if: ${{steps.cachePkgConfigLiteZip.outputs.cache-hit != 'true' && steps.cachePostgres.outputs.cache-hit != 'true'}}
        uses: suisei-cn/actions-download-file@v1.6.0
        id: downloadPkgConfigLiteZip
        with:
          retry-times: 5
          url: http://downloads.sourceforge.net/project/pkgconfiglite/${{vars.PKGCONFIGLITE_VERSION}}/pkg-config-lite-${{vars.PKGCONFIGLITE_VERSION}}_bin-win32.zip
          filename: pkg-config-lite_bin-win32.zip

      - name: Download winflexbison for Compile using msvc
        if: ${{steps.cacheWinFlexBisonZip.outputs.cache-hit != 'true' && steps.cachePostgres.outputs.cache-hit != 'true'}}
        uses: suisei-cn/actions-download-file@v1.6.0
        id: downloadWinFlexBisonZip
        with:
          retry-times: 5
          url: https://sourceforge.net/projects/winflexbison/files/win_flex_bison-${{vars.WINFLEXBISON_VERSION}}.zip
          filename: win_flex_bison.zip

      - name: Download postgresql install from EDB
        uses: suisei-cn/actions-download-file@v1.6.0
        if: ${{steps.cachePostgresInstaller.outputs.cache-hit != 'true'}}
        id: downloadPostgresInstaller
        with:
          retry-times: 5
          url: https://sbp.enterprisedb.com/getfile.jsp?fileid=${{vars.POSTGRESQL_PACKAGE_FILEID}}
          target: c:\OTHERBIN
          filename: postgresql_install.exe

      - name: Extract Diffutils for Test on PostgreSQL for Windows
        if: ${{steps.cacheDiffutilsZip.outputs.cache-hit != 'true'}}
        shell: cmd
        run: |
          rem MKDIR creates any intermediate directories in the path, if needed.
          mkdir "C:\OTHERBIN\diffutils"
          rem 7z is provided by Github Actions
          7z x diffutils-bin.zip -o"C:\OTHERBIN\diffutils"

      - name: Add Diffutils bin directory to the PATH for Test on PostgreSQL for Windows
        shell: cmd
        run: |
          rem - man7.org/linux/man-pages/man1/printf.1.html
          printf "C:\\OTHERBIN\\diffutils\\bin" >> %GITHUB_PATH%

      - name: Extract pkgconfiglite for Compile using msvc and meson
        if: ${{steps.cachePkgConfigLiteZip.outputs.cache-hit != 'true' && steps.cachePostgres.outputs.cache-hit != 'true'}}
        shell: cmd
        run: |
          rem MKDIR creates any intermediate directories in the path, if needed.
          mkdir "C:\OTHERBIN\pkgconfiglite"
          rem 7z is provided by Github Actions
          7z x pkg-config-lite_bin-win32.zip -o"C:\OTHERBIN\pkgconfiglite"

      - name: Add pkgconfiglite bin directory to the PATH for Compile using msvc and meson
        if: ${{steps.cachePostgres.outputs.cache-hit != 'true'}}
        shell: cmd
        run: |
          rem - man7.org/linux/man-pages/man1/printf.1.html
          printf "C:\\OTHERBIN\\pkgconfiglite\\pkg-config-lite-%PKGCONFIGLITE_VERSION%\\bin" >> %GITHUB_PATH%

      - name: Install Win64OpenSSL
        if: ${{steps.cacheWin64OpenSSL.outputs.cache-hit != 'true' && steps.cachePostgres.outputs.cache-hit != 'true'}}
        shell: cmd
        run: Win64OpenSSL.exe /sp /silent /dir=c:\OTHERBIN\openssl64

        # Choco Install winflexbison
        # BUT the "crazy-max/ghaction-chocolatey@v2" "install pkgconfiglite" file download often times-out
      - name: Extract winflexbison for Compile using msvc
        if: ${{steps.cacheWinFlexBisonZip.outputs.cache-hit != 'true' && steps.cachePostgres.outputs.cache-hit != 'true'}}
        shell: cmd
        run: |
          rem MKDIR creates any intermediate directories in the path, if needed.
          mkdir "C:\OTHERBIN\winflexbison"
          rem 7z is provided by Github Actions
          7z x win_flex_bison.zip -o"C:\OTHERBIN\winflexbison"

      - name: Add the winflexbison directory to the PATH for Compile using msvc
        if: ${{steps.cachePostgres.outputs.cache-hit != 'true'}}
        shell: cmd
        run: |
          rem - man7.org/linux/man-pages/man1/printf.1.html
          printf "C:\OTHERBIN\\winflexbison" >> %GITHUB_PATH%

      - name: Setup msvc x64
        if: ${{steps.cachePostgres.outputs.cache-hit != 'true'}}
        uses: TheMrMilchmann/setup-msvc-dev@v3
        with: 
          arch: x64

      - name : Build postgres x64
        if: ${{steps.cachePostgres.outputs.cache-hit != 'true'}}
        working-directory: postgres
        run: |
          meson setup build -Dssl=openssl -Dextra_lib_dirs=c:\OTHERBIN\openssl64\lib\VC\x64\MT -Dextra_include_dirs=c:\OTHERBIN\openssl64\include --prefix=d:\postgresql
          cd build
          ninja
          ninja install
          cp c:\OTHERBIN\openssl64\*.dll d:\postgresql\bin

      - name: Checkout aws-pgsql-odbc
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 1

      - name: Initialize submodules
        run: |
          git submodule update --init --recursive

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2

      - name: Setup nmake
        uses: ilammy/msvc-dev-cmd@v1.13.0

      - name: Install WiX
        shell: cmd
        run: |
          dotnet tool install --global wix
          wix extension add --global WixToolset.UI.wixext/6.0.0

      - name: Cache AWS SDK libraries
        id: cache-dynamic-aws-sdk
        uses: actions/cache@v4
        with:
          path: |
            libs/aws-rds-odbc/aws_sdk
          key: ${{ runner.os }}-aws-sdk-dynamic-lib

      - name: Build the driver and the installer
        run: |
          copy .github\workflows\configuration.xml winbuild
          .\windows\buildall.ps1 ${{env.BUILD_CONFIGURATION}}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-skip-session-tagging: true
          aws-access-key-id: ${{ secrets.AWS_BUILD_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_BUILD_SECRET_KEY }}
          aws-session-token: ${{ secrets.AWS_BUILD_SESSION_TOKEN }}
          aws-region: us-west-2
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-external-id: ${{ secrets.AWS_ROLE_EXTERNAL_ID }}
          role-duration-seconds: 3600

      - name: Run signer script
        shell: pwsh
        working-directory: ./scripts
        run: |
          choco upgrade jq -y
          . ".\sign_installer.ps1"
          Invoke-SignInstaller ${{ github.workspace }}\installer/x64/ winx64a ${{ github.ref_name }} ${{ secrets.AWS_UNSIGNED_BUCKET }} ${{ secrets.AWS_SIGNED_BUCKET }} ${{ secrets.AWS_S3_KEY }}aws-pgsql-odbc-${{ github.ref_name }}-winx64a.msi

      - name: Upload installer
        uses: actions/upload-artifact@v4
        with:
          name: installers-windows
          path: ./installer/x64/*winx64a.msi
          retention-days: 5
          if-no-files-found: error

  # Create Release
  draft-release:
    name: Create Draft Release
    runs-on: ubuntu-latest
    needs: [
      # build-linux,
      build-macos,
      build-windows
    ]
    env:
      # linux_x64_ansi_hash: ${{needs.build-linux.outputs.linux_x64_ansi}}
      # linux_x64_unicode_hash: ${{needs.build-linux.outputs.linux_x64_unicode}}
      macos_arm64_ansi_hash: ${{needs.build-macos.outputs.macos_arm64_ansi}}
      macos_arm64_unicode_hash: ${{needs.build-macos.outputs.macos_arm64_unicode}}
    steps:
      - name: Checkout aws-pgsql-odbc
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Download all installers
        uses: actions/download-artifact@v4.1.7
        with:
          path: installers
          pattern: installers-*
          merge-multiple: true

      - name: Extract release notes
        uses: ffurrer2/extract-release-notes@v2
        with:
          release_notes_file: RELEASE_DETAILS.md

      - name: Append Checksums
        run: |
          cat << EOF >> RELEASE_DETAILS.md

          ### SHA256 Checksums

          - macos-arm64-ansi: \`$macos_arm64_ansi_hash\`
          - macos-arm64-unicode: \`$macos_arm64_unicode_hash\`

          EOF

      - name: Upload to Draft Release
        uses: ncipollo/release-action@v1
        with:
          draft: true
          name: "AWS ODBC Driver for PostgreSQL - v${{ github.ref_name }}"
          bodyFile: RELEASE_DETAILS.md
          artifacts: "*/*.zip, */*.msi, */*.tar.gz"
          token: ${{ secrets.GITHUB_TOKEN }}
