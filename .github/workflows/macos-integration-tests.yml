name: MacOS Integration Tests
run-name: aws-pgsql-odbc MacOS Integration Tests - ${{ github.event.head_commit.message }}

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '**'
    paths-ignore:
      - '**/*.md'
      - '**/*.jpg'
      - '**/*.png'
      - '**/README.*'
      - '**/LICENSE.*'
      - 'docs/**'
      - 'ISSUE_TEMPLATE/**'
      - '**/remove-old-artifacts.yml'
      - '**/build-installer.yml'
      - '**/release.yml'

env:
  BUILD_TYPE: Release

  # Test configuration
  TEST_DATABASE: 'postgres'
  ENGINE: 'aurora-postgresql'
  ENGINE_VERSION: '16.4'
  NUM_AURORA_INSTANCES: 5
  TEST_DSN_ANSI: 'AWSpsqlODBC_ansi'
  TEST_DSN_UNICODE: 'AWSpsqlODBC_unicode'
  DRIVER_NAME_ANSI: 'AWS ANSI ODBC Driver for PostgreSQL (x64)'
  DRIVER_NAME_UNICODE: 'AWS Unicode ODBC Driver for PostgreSQL (x64)'

concurrency:
  group: macos-integration-${{ github.ref }}
  cancel-in-progress: true

jobs:
  macos-integration-tests:
    name: "MacOS Integration Tests"
    runs-on: macos-15
    steps:
      - name: Checkout aws-pgsql-odbc
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 1

      - name: Initialize submodules
        run: |
          git submodule update --init --recursive

      - name: Install dependencies
        run: |
          brew install unixodbc autoconf automake gflags postgresql zlib

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Set up Temp AWS Credentials
        run: |
          creds=($(aws sts get-session-token \
            --duration-seconds 21600 \
            --query 'Credentials.[AccessKeyId, SecretAccessKey, SessionToken]' \
            --output text \
          | xargs));
          echo "::add-mask::${creds[0]}"
          echo "::add-mask::${creds[1]}"
          echo "::add-mask::${creds[2]}"
          echo "AWS_ACCESS_KEY_ID=${creds[0]}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${creds[1]}" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=${creds[2]}" >> $GITHUB_ENV

      - name: Setup Cluster ID
        run: |
          echo "AURORA_CLUSTER_ID=AWS-PGODBC-MacOS-Integ-${{github.run_id}}${{github.run_attempt}}" >> $GITHUB_ENV

      - name: Create Aurora Cluster
        id: auroraClusterSetup
        shell: bash
        working-directory: macos
        run: |
          . "./aws_rds_helper"
          create_aurora_rds_cluster \
            ${{ secrets.TEST_USERNAME }} \
            ${{ secrets.TEST_PASSWORD }} \
            ${{ env.TEST_DATABASE }} \
            ${{ env.AURORA_CLUSTER_ID }} \
            ${{ env.NUM_AURORA_INSTANCES }} \
            ${{ env.ENGINE }} \
            ${{ env.ENGINE_VERSION }} \
            ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Get Aurora Cluster endpoint
        shell: bash
        working-directory: macos
        run: |
          . "./aws_rds_helper"
          endpoint=$(get_cluster_endpoint ${{ env.AURORA_CLUSTER_ID }})
          echo "AURORA_CLUSTER_ENDPOINT=$endpoint" >> $GITHUB_ENV
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ env.AWS_SESSION_TOKEN }}

      - name: Create Aurora Cluster Secrets
        shell: bash
        working-directory: macos
        run: |
            . "./aws_rds_helper"
            secretsArn=$(create_db_secrets \
                ${{ secrets.TEST_USERNAME }} \
                ${{ secrets.TEST_PASSWORD }} \
                ${{ env.ENGINE }} \
                ${{ env.AURORA_CLUSTER_ENDPOINT }})
            echo "::add-mask::$secretsArn"
            echo "AURORA_CLUSTER_SECRETS_ARN=$secretsArn" >> $GITHUB_ENV

      - name: Cache AWS SDK libraries
        id: cache-static-aws-sdk
        uses: actions/cache@v4
        if: always() && steps.cache-static-aws-sdk.outputs.cache-hit != 'true'
        with:
          path: ./libs/aws-rds-odbc/aws_sdk
          key: ${{ runner.os }}-aws-sdk-dynamic-lib

      - name: Build and install AWS SDK C++
        working-directory: ./libs/aws-rds-odbc/scripts
        if: steps.cache-static-aws-sdk.outputs.cache-hit != 'true'
        run: |
          ./build_aws_sdk_macos Release

      - name: Build driver
        shell: bash
        run: |
          ./macos/buildall ${{ env.BUILD_TYPE }} FALSE

      - name: Build and Run ANSI Integration Tests
        shell: bash
        if: ${{ !cancelled() && steps.auroraClusterSetup.outcome == 'success'}}
        run: |
          cmake -S test_integration -B build_ansi -DUNICODE_BUILD=FALSE -DTEST_LIMITLESS=FALSE -DSHOULD_BUILD_FAILOVER=FALSE
          cmake --build build_ansi --config ${{ env.BUILD_TYPE }}
          ./build_ansi/bin/integration
        env:
          TEST_DSN_ANSI: ${{ env.TEST_DSN_ANSI }}
          TEST_DSN_UNICODE: ${{ env.TEST_DSN_UNICODE }}
          TEST_DSN: ${{ env.TEST_DSN_ANSI }}
          TEST_DRIVER_ANSI: "${{ github.workspace }}/.libs/awspsqlodbca.so"
          TEST_DRIVER_UNICODE: "${{ github.workspace }}/.libs/awspsqlodbcw.so"
          ODBCINI: "${{ github.workspace }}/build/test/odbc.ini"
          ODBCINST: "${{ github.workspace }}/build/test/odbcinst.ini"
          ODBCSYSINI: "${{ github.workspace }}/build/test"
          TEST_USERNAME: ${{ secrets.TEST_USERNAME }}
          TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
          TEST_SERVER: ${{ env.AURORA_CLUSTER_ENDPOINT }}
          POSTGRES_PORT: "5432"
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ env.AWS_SESSION_TOKEN }}
          RDS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          IAM_USER: ${{ secrets.TEST_IAM_USER }}
          SECRETS_ARN: ${{ env.AURORA_CLUSTER_SECRETS_ARN }}

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        env:
          TEST_DSN_ANSI: ${{ env.TEST_DSN_ANSI }}
          TEST_DSN_UNICODE: ${{ env.TEST_DSN_UNICODE }}
          TEST_DSN: ${{ env.TEST_DSN_ANSI }}
          TEST_DRIVER_ANSI: "${{ github.workspace }}/.libs/awspsqlodbca.so"
          TEST_DRIVER_UNICODE: "${{ github.workspace }}/.libs/awspsqlodbcw.so"
          ODBCINI: "${{ github.workspace }}/build/test/odbc.ini"
          ODBCINST: "${{ github.workspace }}/build/test/odbcinst.ini"
          ODBCSYSINI: "${{ github.workspace }}/build/test"
          TEST_USERNAME: ${{ secrets.TEST_USERNAME }}
          TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
          TEST_SERVER: ${{ env.AURORA_CLUSTER_ENDPOINT }}
          POSTGRES_PORT: "5432"
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ env.AWS_SESSION_TOKEN }}
          RDS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          IAM_USER: ${{ secrets.TEST_IAM_USER }}
          SECRETS_ARN: ${{ env.AURORA_CLUSTER_SECRETS_ARN }}

      - name: Delete Aurora Cluster
        if: always()
        shell: bash
        working-directory: macos
        run: |
          . "./aws_rds_helper"
          delete_aurora_db_cluster ${{ env.AURORA_CLUSTER_ID }} ${{ secrets.AWS_DEFAULT_REGION }} ${{ env.NUM_AURORA_INSTANCES }}
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ env.AWS_SESSION_TOKEN }}

      - name: Delete Aurora Cluster Secrets
        if: always()
        shell: bash
        working-directory: macos
        run: |
          . "./aws_rds_helper"
          delete_secrets ${{ env.AURORA_CLUSTER_SECRETS_ARN }}
        env:
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ env.AWS_SESSION_TOKEN }}

      - name: 'Get Github Action IP'
        if: always()
        id: ip
        uses: haythem/public-ip@v1.3

      - name: 'Remove Github Action IP'
        if: always()
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-name default \
            --protocol tcp \
            --port 5432 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32 \
          2>&1 > /dev/null;

      - name: 'Archive log results'
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: 'macos-integration-test-logs'
          path: logs
          retention-days: 3
